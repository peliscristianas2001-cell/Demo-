
"use client"

import { useEffect, useState } from "react"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { DatePicker } from "@/components/ui/date-picker"
import { useToast } from "@/hooks/use-toast"
import type { Tour } from "@/lib/types"

interface TripFormProps {
  isOpen: boolean
  onOpenChange: (isOpen: boolean) => void
  onSave: (tour: Tour) => void
  tour: Tour | null
}

export function TripForm({ isOpen, onOpenChange, onSave, tour }: TripFormProps) {
  const [destination, setDestination] = useState("")
  const [date, setDate] = useState<Date | undefined>()
  const [price, setPrice] = useState(0)
  const [totalSeats, setTotalSeats] = useState(40)
  const [busCount, setBusCount] = useState(1)
  const { toast } = useToast()

  useEffect(() => {
    if (tour) {
      setDestination(tour.destination)
      setDate(tour.date)
      setPrice(tour.price)
      setTotalSeats(tour.totalSeats)
      setBusCount(tour.busCount)
    } else {
      // Reset form for new trip
      setDestination("")
      setDate(undefined)
      setPrice(0)
      setTotalSeats(40)
      setBusCount(1)
    }
  }, [tour, isOpen])

  const handleSubmit = () => {
    if (!destination || !date || price <= 0) {
      toast({
        title: "Faltan datos",
        description: "Por favor, completa todos los campos obligatorios.",
        variant: "destructive"
      })
      return
    }

    onSave({
      id: tour?.id || "", // ID will be generated by the parent component for new trips
      destination,
      date,
      price,
      totalSeats,
      busCount,
      flyerUrl: tour?.flyerUrl || "https://placehold.co/400x500.png",
      occupiedSeats: tour?.occupiedSeats || [],
    })
  }

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{tour ? "Editar Viaje" : "Crear Nuevo Viaje"}</DialogTitle>
          <DialogDescription>
            {tour ? "Modifica los detalles del viaje." : "Completa los detalles para crear un nuevo viaje."}
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="destination" className="text-right">Destino</Label>
            <Input id="destination" value={destination} onChange={(e) => setDestination(e.target.value)} className="col-span-3" />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="date" className="text-right">Fecha</Label>
            <DatePicker date={date} setDate={setDate} className="col-span-3 h-10" />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="price" className="text-right">Precio</Label>
            <Input id="price" type="number" value={price} onChange={(e) => setPrice(Number(e.target.value))} className="col-span-3" />
          </div>
           <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="busCount" className="text-right">Micros</Label>
            <Input id="busCount" type="number" value={busCount} onChange={(e) => setBusCount(Number(e.target.value))} className="col-span-3" />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="totalSeats" className="text-right">Asientos (por micro)</Label>
            <Input id="totalSeats" type="number" value={totalSeats} onChange={(e) => setTotalSeats(Number(e.target.value))} className="col-span-3" />
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>Cancelar</Button>
          <Button onClick={handleSubmit}>Guardar Cambios</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
